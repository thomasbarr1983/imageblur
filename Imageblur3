class Image
  attr_accessor :image

  def initialize(image) 
    @image = image
  end 

  def output_image 
    @image.each do |array|
      puts array.join("")
    end
  end

  def transform(number)
    n = number.to_s.to_i 

    n.times do 
      b = Marshal.load( Marshal.dump(@image) )
      @image.each_with_index do |row, y|
      row.each_with_index do |num, x|
        if b[y][x] == 1 
          @image[y + 1][x] = 1 unless y == @image.length-1 # down 
          @image[y - 1][x] = 1 unless y == 0 # extracting things from array #up
          @image[y][x + 1] = 1 unless x == @image[y].length-1 #right
          @image[y][x - 1] = 1 unless x == 0 # left
        end
      end 
      end
    end


  end
end

class TestImage < MiniTest::Test
  def test_image_transform
    image = Image.new([
      [0,0,0,0],
      [0,0,0,0],
      [0,0,0,0],
      [0,1,0,0],
      [0,0,0,0],
      [0,0,0,0]

    ])
    assert image.transform(2)
    expected = [
      [0,0,0,0],
      [0,1,0,0],
      [1,1,1,0],
      [1,1,1,1],
      [1,1,1,0],
      [0,1,0,0] ]
    assert_equal expected, image.image 
  end 
end